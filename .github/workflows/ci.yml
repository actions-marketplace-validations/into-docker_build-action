name: CI

on: [push]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 10
      - name: install-prettier
        run: npm install
      - name: run-prettier
        uses: samuelmeuli/lint-action@v1
        with:
          github_token: ${{ secrets.github_token }}
          prettier: true

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # extract tag that the action expects
      - name: extract-version
        id: version
        run: >
          export VERSION=$(cat action.yml | \
            grep "docker://intodocker/build-action:" | \
            rev | cut -d: -f1 | cut -c2- | rev) && \
          echo ::set-output name=value::${VERSION}

      # build action
      - uses: docker/setup-buildx-action@v1
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: build-docker-image
        uses: docker/build-push-action@v2
        with:
          tags: intodocker/build-action:latest
          push: false

      # verify: basic behaviour
      - name: build-test-image
        uses: ./
        with:
          builder: intodocker/clojure
          image: test-image
          cache-path: cache.tar
          artifacts-path: target/artifacts
          source-path: test
      - name: verify-cache-exists
        run: test -f cache.tar
      - name: verify-artifacts-were-written
        run: test -f target/artifacts/app.jar

        # verify: cache usage
      - name: build-test-image-with-cache
        uses: ./
        with:
          builder: intodocker/clojure
          image: test-image
          cache-path: cache.tar
          source-path: test
      - name: inspect-test-image
        run: docker inspect test-image:latest
      - name: verify-test-image
        run: test "x$(docker run --rm test-image:latest)" = "xOK"

      # push action to dockerhub
      - name: verify-version-match
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: test "x${{ steps.version.outputs.value }}" = "x${GITHUB_REF:10}"

      - name: publish-docker-image
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: >
          echo "${{ secrets.DOCKER_PASSWORD }}" | \
            docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin && \
            docker push "intodocker/build-action:${{ steps.version.outputs.value }}"

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: export-version
        id: version
        run: echo ::set-output name=value::${GITHUB_REF:10}
      - name: create-release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: "into-docker/build-action@${{ steps.version.outputs.value }}"
          body: |
            This it the [into-docker][] build action version `${{ steps.version.outputs.value }}`, allowing you to run any into-docker builder image as a Github Action.

            **Changes**

            - TODO

            **Usage**

            ```
            - uses: into-docker/build-action@${{ steps.version.outputs.value }}
              with:
                image: target-image:latest
                builder: intodocker/clojure
                profile: default
                cache: cache-file.tar
            ```

            See the [README][] for further options.

            [into-docker]: https://github.com/into-docker/into-docker
            [README]: https://github.com/into-docker/build-action/blob/${{ steps.version.outputs.value }}/README.md
          draft: true
          prerelease: false
